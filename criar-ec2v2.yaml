---
- name: Provisionar Instância EC2 com Auto Scaling Group
  hosts: localhost
  gather_facts: no
  collections:
    - amazon.aws
  vars:
    ec2_key_name: "iac-mack"
    ec2_instance_type: "t2.micro"
    ec2_image: "ami-0fe630eb857a6ec83"  # Substituir pelo ID real da AMI do RedHat
    ec2_volume_size: 10
    vpc_id: "{{ lookup('env', 'VPC_ID') }}"
    subnet_id: "{{ lookup('env', 'SUBNET_ID') }}"
    security_group_name: "webserver-sg"
    ansible_host_file: "/etc/ansible/hosts"
    local_host_file: "/etc/hosts"
    remote_host: "ip-servidor-remoto"
    custom_image_name: "webserver-custom-ami"
    custom_image_description: "Custom AMI with pre-installed Nginx"
    ec2_custom_image: ""  # This will be set after creating the custom AMI

  tasks:
    - name: Criar grupo de segurança
      amazon.aws.ec2_group:
        name: "{{ security_group_name }}"
        description: Grupo de segurança para webserver
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
        state: present
      register: sg

    - name: Lançar instância EC2
      amazon.aws.ec2_instance:
        name: "webserver"
        key_name: "{{ ec2_key_name }}"
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ ec2_image }}"
        vpc_subnet_id: "{{ subnet_id }}"
        security_group: "{{ sg.group_id }}"
        wait: yes
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: "{{ ec2_volume_size }}"
        network:
          assign_public_ip: yes
      register: ec2

    - name: Esperar a instância estar acessível
      wait_for:
        host: "{{ ec2.instances[0].public_ip_address }}"
        port: 22
        delay: 60
        timeout: 320
        state: started

    - name: Instalar Nginx na instância EC2
      ansible.builtin.yum:
        name: nginx
        state: present
      become: yes
      vars:
        ansible_host: "{{ ec2.instances[0].public_ip_address }}"
        ansible_user: ec2-user
        ansible_ssh_private_key_file: /path/to/your/private/key

    - name: Iniciar e habilitar o Nginx
      ansible.builtin.systemd:
        name: nginx
        state: started
        enabled: yes
      become: yes
      vars:
        ansible_host: "{{ ec2.instances[0].public_ip_address }}"
        ansible_user: ec2-user
        ansible_ssh_private_key_file: /path/to/your/private/key

    - name: Criar AMI personalizada a partir da instância EC2
      amazon.aws.ec2_ami:
        instance_id: "{{ ec2.instances[0].id }}"
        name: "{{ custom_image_name }}"
        description: "{{ custom_image_description }}"
        wait: yes
      register: custom_ami

    - name: Definir o ID da AMI personalizada
      set_fact:
        ec2_custom_image: "{{ custom_ami.image_id }}"

    - name: Adicionar nova instância ao grupo de hosts
      add_host:
        name: webserver
        ansible_host: "{{ ec2.instances[0].public_ip_address }}"
        ansible_user: ec2-user
      when: ec2.instances[0].public_ip_address is defined

    - name: Atualizar /etc/hosts local
      become: yes
      become_user: root
      lineinfile:
        path: "{{ local_host_file }}"
        regexp: '^.*\s+webserver\s*$'
        line: "{{ ec2.instances[0].public_ip_address }} webserver"
        state: present
        create: yes
      when: ec2.instances[0].public_ip_address is defined

    - name: Atualizar arquivo de hosts do Ansible
      become: yes
      become_user: root
      lineinfile:
        path: "{{ ansible_host_file }}"
        regexp: '^.*\s+webserver\s*$'
        line: "webserver ansible_host={{ ec2.instances[0].public_ip_address }}"
        state: present
        create: yes
      when: ec2.instances[0].public_ip_address is defined

    - name: Garantir que o webserver esteja no grupo de auto-scaling
      amazon.aws.autoscaling_group:
        name: "webserver-asg"
        desired_capacity: 1
        min_size: 1
        max_size: 3
        vpc_zone_identifier: "{{ subnet_id }}"
        launch_template:
          launch_template_name: "webserver-lt"
        state: present 

- name: Criar Template de Lançamento para Auto Scaling Group
  hosts: localhost
  gather_facts: no
  collections:
    - community.aws
  tasks:
    - name: Criar template de lançamento
      community.aws.ec2_launch_template:
        name: "webserver-lt"
        image_id: "{{ ec2_custom_image }}"
        instance_type: "{{ ec2_instance_type }}"
        key_name: "{{ ec2_key_name }}"
        security_groups:
          - "{{ sg.group_id }}"
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: "{{ ec2_volume_size }}"
        state: present
