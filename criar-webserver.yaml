---
- name: Provisionar Instância EC2
  hosts: localhost
  gather_facts: no
  collections:
    - amazon.aws
  vars:
    ec2_key_name: "{{ lookup('env', 'EC2_KEY_NAME').split('.')[0] }}"
    ec2_instance_type: "t2.micro"
    ec2_image: "ami-04b70fa74e45c3917"  # Substituir pelo ID da AMI Linux desejada
    ec2_volume_size: 10
    security_group_name: "webserver-sg"
    user_data_template: |
      #!/bin/bash
      apt-get update -y
      apt-get upgrade -y
      apt-get install -y apt-transport-https ca-certificates curl software-properties-common
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
      add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      apt-get update -y
      apt-get install -y docker-ce
      systemctl start docker
      systemctl enable docker
      docker run -d -p 80:80 --name nginx nginx
      # Garantir que o SSH esteja rodando
      apt-get install -y openssh-server
      systemctl enable ssh
      systemctl start ssh

  tasks:
    - name: Carregar variáveis de ambiente do .bashrc
      shell: source ~/.bashrc && env
      register: shell_output

    - name: Setar variáveis de ambiente
      set_fact:
        vpc_id: "{{ shell_output.stdout_lines | select('search', '^VPC_ID=') | list | first | split('=') | last }}"
        subnet_id: "{{ shell_output.stdout_lines | select('search', '^SUBNET_ID=') | list | first | split('=') | last }}"

    - name: Exibir variáveis carregadas
      debug:
        msg: "VPC_ID: {{ vpc_id }}, SUBNET_ID: {{ subnet_id }}"

    - name: Criar grupo de segurança
      amazon.aws.ec2_group:
        name: "{{ security_group_name }}"
        description: Security group for webserver
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
        state: present
      register: sg

    - name: Renderizar o user_data com a chave pública
      set_fact:
        user_data: "{{ user_data_template }}"

    - name: Lançar instância EC2
      amazon.aws.ec2_instance:
        name: "webserver"
        key_name: "{{ ec2_key_name }}"
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ ec2_image }}"
        vpc_subnet_id: "{{ subnet_id }}"
        security_group: "{{ sg.group_id }}"
        wait: yes
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: "{{ ec2_volume_size }}"
        network:
          assign_public_ip: yes
        user_data: "{{ user_data }}"
      register: ec2

    - name: Depurar detalhes da instância EC2
      debug:
        var: ec2

    - name: Salvar detalhes da instância em um arquivo
      copy:
        content: |
          instance_id: {{ ec2.instances[0].instance_id }}
          public_ip_address: {{ ec2.instances[0].public_ip_address }}
        dest: ./ec2_instance_details.yml
