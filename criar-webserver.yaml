---
- name: Provisionar Webserver EC2
  hosts: localhost
  gather_facts: no
  collections:
    - amazon.aws
  vars:
    ec2_key_name: "webserver-key"
    ec2_instance_type: "t2.micro"
    ec2_image: "ami-04b70fa74e45c3917"  # Substituir pelo ID da AMI Linux desejada
    ec2_volume_size: 10
    security_group_name: "webserver-sg"
    user_data_template: |
      #!/bin/bash
      sudo apt update -y
      sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      sudo apt update -y
      sudo apt install -y docker-ce
      sudo systemctl start docker
      sudo systemctl enable docker
      sudo docker run -d -p 80:80 --name nginx nginx
      # Garantir que o SSH esteja rodando
      sudo apt install -y openssh-server
      sudo systemctl enable ssh
      sudo systemctl start ssh

  tasks:
    - name: Criar par de chaves
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        region: "{{ lookup('ini', 'AWS_DEFAULT_REGION section=default file=~/.aws/credentials') }}"
        state: present
      register: ec2_key

    - name: Salvar chave privada no diretório home do usuário executante
      copy:
        content: "{{ ec2_key.key.private_key }}"
        dest: "{{ lookup('env', 'HOME') }}/{{ ec2_key_name }}.pem"
        mode: '0600'
      when: ec2_key.key.private_key is defined

    - name: Remover variável EC2_KEY_NAME existente do .bashrc
      lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '^export EC2_KEY_NAME='

    - name: Exportar nome da key pair para .bashrc
      lineinfile:
        path: ~/.bashrc
        line: "export EC2_KEY_NAME={{ ec2_key_name }}"
        create: yes

    - name: Carregar variáveis de ambiente do .bashrc
      shell: /bin/bash -c "source ~/.bashrc && env"
      register: shell_output

    - name: Setar variáveis de ambiente
      set_fact:
        ec2_key_name: "{{ (shell_output.stdout_lines | select('search', '^EC2_KEY_NAME=') | list | first | split('=') | last).split('.')[0] }}"
        vpc_id: "{{ shell_output.stdout_lines | select('search', '^VPC_ID=') | list | first | split('=') | last }}"
        subnet_id_az1: "{{ shell_output.stdout_lines | select('search', '^SUBNET_ID_AZ1=') | list | first | split('=') | last }}"
        subnet_id_az2: "{{ shell_output.stdout_lines | select('search', '^SUBNET_ID_AZ2=') | list | first | split('=') | last }}"
        region: "{{ lookup('ini', 'AWS_DEFAULT_REGION section=default file=~/.aws/credentials') }}"

    - name: Exibir variáveis carregadas
      debug:
        msg: "VPC_ID: {{ vpc_id }}, SUBNET_ID_AZ1: {{ subnet_id_az1 }}, SUBNET_ID_AZ2: {{ subnet_id_az2 }}, EC2_KEY_NAME: {{ ec2_key_name }}, REGION: {{ region }}"

    - name: Criar grupo de segurança
      amazon.aws.ec2_group:
        name: "{{ security_group_name }}"
        description: Security group for webserver
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
        state: present
        region: "{{ region }}"
      register: sg

    - name: Remover variável SG_ID existente do .bashrc
      lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '^export SG_ID='

    - name: Exportar SG_ID para .bashrc
      lineinfile:
        path: ~/.bashrc
        line: "export SG_ID={{ sg.group_id }}"
        create: yes

    - name: Criar instância EC2
      amazon.aws.ec2_instance:
        name: "webserver"
        key_name: "{{ ec2_key_name }}"
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ ec2_image }}"
        vpc_subnet_id: "{{ subnet_id_az1 }}"
        security_group: "{{ sg.group_id }}"
        wait: yes
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: "{{ ec2_volume_size }}"
        network:
          assign_public_ip: yes
        user_data: "{{ user_data_template }}"
        region: "{{ region }}"
      register: ec2

    - name: Aguardar a inicialização da instância EC2
      wait_for:
        host: "{{ ec2.instances[0].public_ip_address }}"
        port: 22
        state: started
        timeout: 300

    - name: Depurar detalhes da instância EC2
      debug:
        var: ec2

    - name: Remover variável EC2_INSTANCE_ID existente do .bashrc
      lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '^export EC2_INSTANCE_ID='

    - name: Exportar Instance ID para .bashrc
      lineinfile:
        path: ~/.bashrc
        line: "export EC2_INSTANCE_ID={{ ec2.instances[0].instance_id }}"
        create: yes

    - name: Carregar novas variáveis de ambiente do .bashrc
      shell: /bin/bash -c "source ~/.bashrc && env"

    - name: Variáveis de ambiente carregadas com sucesso!
      debug:
        msg: "Instance ID exportado com sucesso para .bashrc!"
