---
- name: Criar Launch Template a partir da AMI
  hosts: localhost
  gather_facts: no
  collections:
    - community.aws
  tasks:
    - name: Carregar variáveis de ambiente do .bashrc
      shell: /bin/bash -c "source ~/.bashrc && env"
      register: shell_output

    - name: Exibir saída das variáveis carregadas
      debug:
        var: shell_output.stdout_lines

    - name: Verificar se as variáveis AMI_ID, EC2_KEY_NAME, SG_ID e INSTANCE_ID estão definidas
      fail:
        msg: "As variáveis AMI_ID, EC2_KEY_NAME, SG_ID ou INSTANCE_ID não foram encontradas no .bashrc"
      when: 
        - shell_output.stdout_lines | select('search', '^AMI_ID=') | list | length == 0
        - shell_output.stdout_lines | select('search', '^EC2_KEY_NAME=') | list | length == 0
        - shell_output.stdout_lines | select('search', '^SG_ID=') | list | length == 0
        - shell_output.stdout_lines | select('search', '^INSTANCE_ID=') | list | length == 0

    - name: Setar variáveis de ambiente
      set_fact:
        ami_id: "{{ shell_output.stdout_lines | select('search', '^AMI_ID=') | list | first | split('=') | last }}"
        ec2_key_name: "{{ shell_output.stdout_lines | select('search', '^EC2_KEY_NAME=') | list | first | split('=') | last }}"
        security_group_id: "{{ shell_output.stdout_lines | select('search', '^SG_ID=') | list | first | split('=') | last }}"
        instance_id: "{{ shell_output.stdout_lines | select('search', '^INSTANCE_ID=') | list | first | split('=') | last }}"
        region: "{{ lookup('ini', 'AWS_DEFAULT_REGION section=default file=~/.aws/credentials') }}"

    - name: Verificar se as variáveis estão definidas
      fail:
        msg: "As variáveis ami_id, ec2_key_name, security_group_id ou instance_id estão vazias!"
      when: ami_id == "" or ec2_key_name == "" or security_group_id == "" or instance_id == ""

    - name: Criar AMI da instância
      community.aws.ec2_ami:
        instance_id: "{{ instance_id }}"
        name: "MyAMI"
        wait: yes
        region: "{{ region }}"
      register: ami_result

    - name: Exibir detalhes da AMI criada
      debug:
        var: ami_result

    - name: Criar Launch Template
      community.aws.ec2_launch_template:
        name: "webserver-launch-template"
        version_description: "Initial version"
        image_id: "{{ ami_result.image_id }}"
        instance_type: "t2.micro"
        key_name: "{{ ec2_key_name }}"
        security_group_ids: [ "{{ security_group_id }}" ]
        block_device_mappings:
          - device_name: "/dev/sda1"
            ebs:
              volume_size: 10
              delete_on_termination: true
        state: present
        region: "{{ region }}"
      register: launch_template_result

    - name: Exibir detalhes do Launch Template criado
      debug:
        var: launch_template_result

    - name: Verificar conteúdo do Launch Template result
      debug:
        msg: "{{ launch_template_result }}"

    - name: Remover variáveis existentes do .bashrc
      lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '^export LAUNCH_TEMPLATE_ID='

    - name: Remover variável LAUNCH_TEMPLATE_NAME existente do .bashrc
      lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '^export LAUNCH_TEMPLATE_NAME='

    - name: Remover variável LAUNCH_TEMPLATE_VERSION existente do .bashrc
      lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '^export LAUNCH_TEMPLATE_VERSION='

    - name: Exportar Launch Template ID para .bashrc
      lineinfile:
        path: ~/.bashrc
        line: "export LAUNCH_TEMPLATE_ID={{ launch_template_result.LaunchTemplate.LaunchTemplateId }}"
        create: yes

    - name: Exportar Launch Template Name para .bashrc
      lineinfile:
        path: ~/.bashrc
        line: "export LAUNCH_TEMPLATE_NAME={{ launch_template_result.LaunchTemplate.LaunchTemplateName }}"
        create: yes

    - name: Exportar Launch Template Version para .bashrc
      lineinfile:
        path: ~/.bashrc
        line: "export LAUNCH_TEMPLATE_VERSION={{ launch_template_result.LaunchTemplate.LatestVersionNumber }}"
        create: yes

    - name: Carregar novas variáveis de ambiente do .bashrc
      shell: /bin/bash -c "source ~/.bashrc && env"
      register: new_shell_output

    - name: Verificar se as variáveis estão atualizadas
      debug:
        msg: "LAUNCH_TEMPLATE_ID: {{ new_shell_output.stdout_lines | select('search', '^LAUNCH_TEMPLATE_ID=') | list | first | split('=') | last | default('N/A') }}, LAUNCH_TEMPLATE_NAME: {{ new_shell_output.stdout_lines | select('search', '^LAUNCH_TEMPLATE_NAME=') | list | first | split('=') | last | default('N/A') }}, LAUNCH_TEMPLATE_VERSION: {{ new_shell_output.stdout_lines | select('search', '^LAUNCH_TEMPLATE_VERSION=') | list | first | split('=') | last | default('N/A') }}"

    - name: Verificar conteúdo do .bashrc
      shell: cat ~/.bashrc
      register: bashrc_content

    - name: Exibir conteúdo do .bashrc
      debug:
        var: bashrc_content.stdout_lines
