---
- name: Provisionar Instância EC2 para Master Ansible
  hosts: localhost
  gather_facts: no
  collections:
    - amazon.aws
  vars:
    ec2_key_name: "master-ansible-key"
    ec2_instance_type: "t2.micro"
    ec2_image: "ami-0fe630eb857a6ec83"  # Substituir pelo ID da AMI Linux desejada
    ec2_volume_size: 10
    region: "us-east-1"
    user_data_template: |
      #!/bin/bash
      sudo dnf update -y
      sudo dnf install -y ansible python3 python3-pip git vim openssh-server
      sudo pip3 install boto3 botocore
      sudo ansible-galaxy collection install amazon.aws
      sudo ansible-galaxy collection install community.aws
      sudo systemctl enable sshd
      sudo systemctl start sshd
      git clone https://github.com/giovanni-gava/iac-mack.git /home/ec2-user/iac-mack
      sudo mkdir -p /home/ec2-user/.aws
      sudo touch /home/ec2-user/.aws/credentials
      sudo chmod 600 /home/ec2-user/.aws/credentials
      cat <<EOF | sudo tee /home/ec2-user/.aws/credentials
      [default]
      AWS_ACCESS_KEY_ID=
      AWS_SECRET_ACCESS_KEY=
      AWS_DEFAULT_REGION=us-east-1
      EOF
  tasks:
    - name: Criar par de chaves
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        region: "{{ region }}"
        state: present
      register: ec2_key

    - name: Salvar chave privada no diretório home do usuário executante
      copy:
        content: "{{ ec2_key.key.private_key }}"
        dest: "{{ lookup('env', 'HOME') }}/{{ ec2_key_name }}.pem"
        mode: '0600'
      when: ec2_key.key.private_key is defined

    - name: Remover variável EC2_KEY_NAME existente do .bashrc
      lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '^export EC2_KEY_NAME='

    - name: Exportar nome da key pair para .bashrc
      lineinfile:
        path: ~/.bashrc
        line: "export EC2_KEY_NAME={{ ec2_key_name }}"
        create: yes

    - name: Criar grupo de segurança
      amazon.aws.ec2_group:
        name: "master-ansible-sg"
        description: "Security group for master-ansible"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
        state: present
        region: "{{ region }}"
      register: sg

    - name: Renderizar o setup_script
      set_fact:
        setup_script_content: |
          #!/bin/bash

          # Atualizar e instalar dependências
          echo "Atualizando e instalando dependências..."
          sudo dnf update -y
          sudo dnf install -y ansible-core python3 python3-pip git vim

          # Instalar boto3 e botocore
          echo "Instalando boto3 e botocore..."
          pip3 install boto3 botocore

          # Instalar AWS CLI
          echo "Instalando AWS CLI..."
          pip3 install awscli

          # Instalar coleções Ansible Galaxy
          echo "Instalando coleções Ansible Galaxy..."
          ansible-galaxy collection install amazon.aws
          ansible-galaxy collection install community.aws

          # Clonar repositório do GitHub
          echo "Clonando repositório do GitHub..."
          git clone https://github.com/giovanni-gava/iac-mack.git ~/iac-mack

          # Configurar credenciais da AWS
          echo "Configurando credenciais da AWS..."
          mkdir -p ~/.aws
          cat <<EOF > ~/.aws/credentials
          [default]
          AWS_ACCESS_KEY_ID=$(read -p "Digite sua AWS Access Key ID: " access_key && echo $access_key)
          AWS_SECRET_ACCESS_KEY=$(read -sp "Digite sua AWS Secret Access Key: " secret_key && echo $secret_key)
          AWS_DEFAULT_REGION=$(read -p "Digite a região AWS (ex: us-east-1): " region && echo $region)
          EOF

          echo "Configuração concluída com sucesso!"

    - name: Lançar instância EC2
      amazon.aws.ec2_instance:
        name: "master-ansible"
        key_name: "{{ ec2_key_name }}"
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ ec2_image }}"
        wait: yes
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: "{{ ec2_volume_size }}"
        network:
          assign_public_ip: yes
        security_groups: ["master-ansible-sg"]
        user_data: |
          #!/bin/bash
          sudo touch /home/ec2-user/setup.sh
          sudo chmod +x /home/ec2-user/setup.sh
        region: "{{ region }}"
      register: ec2

    - name: Aguardar a inicialização da instância EC2
      wait_for:
        host: "{{ ec2.instances[0].public_ip_address }}"
        port: 22
        state: started
        timeout: 300

    - name: Criar script setup.sh no diretório home do usuário
      command: |
        ssh -o StrictHostKeyChecking=no -i "{{ lookup('env', 'HOME') }}/{{ ec2_key_name }}.pem" ec2-user@{{ ec2.instances[0].public_ip_address }} "sudo mkdir -p /home/ec2-user && echo '{{ setup_script_content }}' | sudo tee /home/ec2-user/setup.sh && sudo chmod +x /home/ec2-user/setup.sh"
