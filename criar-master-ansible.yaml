---
- name: Provisionar Instância EC2 para Master Ansible
  hosts: localhost
  gather_facts: no
  collections:
    - amazon.aws
  vars:
    ec2_key_name: "master-ansible-key"
    ec2_instance_type: "t2.micro"
    ec2_image: "ami-04b70fa74e45c3917"  # Substituir pelo ID da AMI Linux desejada
    ec2_volume_size: 10
    security_group_name: "master-ansible-sg"
    region: "us-east-1"
    user_data_template: |
      #!/bin/bash
      apt-get update -y
      apt-get upgrade -y
      apt-get install -y ansible python3 python3-pip vim git openssh-server
      pip3 install boto3 botocore
      ansible-galaxy collection install amazon.aws
      systemctl enable ssh
      systemctl start ssh
      git clone https://github.com/giovanni-gava/iac-mack.git ~/iac-mack
      mkdir -p /root/.aws
      cat <<EOF > /root/.aws/credentials
      [default]
      aws_access_key_id=AWS_ACCESS_KEY_ID_PLACEHOLDER
      aws_secret_access_key=AWS_SECRET_ACCESS_KEY_PLACEHOLDER
      region=us-east-1
      EOF
  tasks:
    - name: Carregar variáveis de ambiente do .bashrc
      shell: source ~/.bashrc && env
      register: shell_output

    - name: Setar variáveis de ambiente
      set_fact:
        vpc_id: "{{ shell_output.stdout_lines | select('search', '^VPC_ID=') | list | first | split('=') | last }}"
        subnet_id_az1: "{{ shell_output.stdout_lines | select('search', '^SUBNET_ID_AZ1=') | list | first | split('=') | last }}"
        region: "{{ lookup('ini', 'AWS_DEFAULT_REGION section=default file=~/.aws/credentials') }}"

    - name: Exibir variáveis carregadas
      debug:
        msg: "VPC_ID: {{ vpc_id }}, SUBNET_ID_AZ1: {{ subnet_id_az1 }}, REGION: {{ region }}"

    - name: Criar par de chaves
      amazon.aws.ec2_key:
        name: "{{ ec2_key_name }}"
        region: "{{ region }}"
        state: present
      register: ec2_key

    - name: Salvar chave privada
      copy:
        content: "{{ ec2_key.key.private_key }}"
        dest: "~/{{ ec2_key_name }}.pem"
        mode: '0600'
      when: ec2_key.key.private_key is defined

    - name: Remover variável EC2_KEY_NAME existente do .bashrc
      lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '^export EC2_KEY_NAME='

    - name: Exportar nome da key pair para .bashrc
      lineinfile:
        path: ~/.bashrc
        line: "export EC2_KEY_NAME={{ ec2_key_name }}"
        create: yes

    - name: Criar grupo de segurança
      amazon.aws.ec2_group:
        name: "{{ security_group_name }}"
        description: Security group for master-ansible
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
        state: present
        region: "{{ region }}"
      register: sg

    - name: Renderizar o user_data com a chave pública
      set_fact:
        user_data: "{{ user_data_template | replace('AWS_ACCESS_KEY_ID_PLACEHOLDER', lookup('env', 'AWS_ACCESS_KEY_ID')) | replace('AWS_SECRET_ACCESS_KEY_PLACEHOLDER', lookup('env', 'AWS_SECRET_ACCESS_KEY')) }}"

    - name: Lançar instância EC2
      amazon.aws.ec2_instance:
        name: "master-ansible"
        key_name: "{{ ec2_key_name }}"
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ ec2_image }}"
        vpc_subnet_id: "{{ subnet_id_az1 }}"
        security_group: "{{ sg.group_id }}"
        wait: yes
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: "{{ ec2_volume_size }}"
        network:
          assign_public_ip: yes
        user_data: "{{ user_data }}"
        region: "{{ region }}"
      register: ec2

    - name: Depurar detalhes da instância EC2
      debug:
        var: ec2

    - name: Remover variável EC2_INSTANCE_ID existente do .bashrc
      lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '^export EC2_INSTANCE_ID='

    - name: Exportar Instance ID para .bashrc
      lineinfile:
        path: ~/.bashrc
        line: "export EC2_INSTANCE_ID={{ ec2.instances[0].instance_id }}"
        create: yes

    - name: Carregar novas variáveis de ambiente do .bashrc
      shell: source ~/.bashrc

    - name: Variáveis de ambiente carregadas com sucesso!
      debug:
        msg: "Variáveis de ambiente carregadas com sucesso!"
